<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PESocket</name>
    </assembly>
    <members>
        <member name="T:PENet.PEMsg">
            <summary>
            自定义消息类的基类，它表示网络传输的实体对象，即最终把这个对象的实例转换为字节数组发送
            </summary>
        </member>
        <member name="F:PENet.PEMsg.cmd">
            <summary>
            表示消息的类型，它是解析消息方式的依据，它需要在消息实例化时指定
            </summary>
        </member>
        <member name="T:PENet.PEPkg">
            <summary>
            用于存储和解析接收到的字节数组
            </summary>
        </member>
        <member name="F:PENet.PEPkg.headLen">
            <summary>
            表示单位表头信息的完整长度;将此值与bodyIndex比较，依次验证数据头的完整性
            </summary>
        </member>
        <member name="F:PENet.PEPkg.headBuff">
            <summary>
            接收数据头信息的缓冲区，它用于专门存储数据包的长度信息
            </summary>
        </member>
        <member name="F:PENet.PEPkg.headIndex">
            <summary>
            头信息缓冲区开始存储的位置，亦表示当前所接收到的数据体的长度
            </summary>
        </member>
        <member name="F:PENet.PEPkg.bodyLen">
            <summary>
            表示数据体的完整长度，它是由headBuff计算而来;将此值与headIndex比较，依次验证数据主体的完整性
            </summary>
        </member>
        <member name="F:PENet.PEPkg.bodyBuff">
            <summary>
            接收数据主体的缓冲区，异步接收的数据将全部存入这个字节数组中
            </summary>
        </member>
        <member name="M:PENet.PEPkg.InitBodyBuff">
            <summary>
            按照数据头信息来初始化数据体的缓冲区
            </summary>
        </member>
        <member name="T:PENet.PESession`1">
            <summary>
            一个Session代表一种网络会话，它包含着需要进行回话的套接字，需要处理消息的类型以及进行通信的方法；
            它被PESocket持有，并在PESocket执行Start()相关方法被实例化;
            它持有的Socket即PESocket的Socket实例
            </summary>
            <typeparam name="T">网络回话需要处理的消息的类型</typeparam>
        </member>
        <member name="M:PENet.PESession`1.StartRcvData(System.Net.Sockets.Socket,System.Action)">
            <summary>
            为Session对象指定套接字和closeCB，并开始异步接收数据，并使用PEPkg来存储和解析
            </summary>
            <param name="skt"></param>
            <param name="closeCB"></param>
        </member>
        <member name="M:PENet.PESession`1.RcvHeadData(System.IAsyncResult)">
            <summary>
            异步接收数据头信息的回调,它按照把数据头存放在headBuff里，数据体存放在bodyBuff里循环进行
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:PENet.PESession`1.RcvBodyData(System.IAsyncResult)">
            <summary>
            异步接收数据主体信息的回调,它按照把数据头存放在headBuff里，数据体存放在bodyBuff里循环进行
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:PENet.PESession`1.SendMsg(`0)">
            <summary>
            将一个（PEMsg）对象实例转换为一个带有字节长度信息的字节数组，并发送给远程主机
            </summary>
        </member>
        <member name="M:PENet.PESession`1.SendMsg(System.Byte[])">
            <summary>
            将字节数组发送给远程主机
            </summary>
        </member>
        <member name="M:PENet.PESession`1.Clear">
            <summary>
            Release Resource
            </summary>
        </member>
        <member name="M:PENet.PESession`1.OnConnected">
            <summary>
            在PESocket建立了与远程主机的连接，并开始异步接收数据之前调用
            重写此类方法，一般用于设置日志窗口，在特殊的时间结点打印在控制台上
            </summary>
        </member>
        <member name="M:PENet.PESession`1.OnReciveMsg(`0)">
            <summary>
            当接受到数据时调用；
            实际上，它是在异步接收到完整的一条数据体信息时开始调用
            </summary>
        </member>
        <member name="M:PENet.PESession`1.OnDisConnected">
            <summary>
            当断开连接时调用；
            触发此方法调用的时机：远程主机断开连接,本机异步接收到一个空报包时调用
            </summary>
        </member>
        <member name="T:PENet.PESocket`2">
            <summary>
            网络传输的发起与接收单位，它可以担任客户端或者服务端的角色；
            它包含了传输所需的套接字和网络回话
            使用IPV4地址族，Stream消息类型，Tcp协议
            </summary>
            <typeparam name="T">网络会话的类型</typeparam>
            <typeparam name="K">网络消息的类型</typeparam>
        </member>
        <member name="F:PENet.PESocket`2.sessionLst">
            <summary>
            回话列表 当以服务器形式启动时会将每次异步连接时，建立的Settion加入到此列表中
            </summary>
        </member>
        <member name="M:PENet.PESocket`2.StartAsServer(System.String,System.Int32)">
            <summary>
            以客户端的形式启动套接字
            1.进行终端绑定，Listen和异步Sccept()的常规操作
            2.如果1成功,为Settion创建一个实例,并开始异步的接收数据;如果失败，Settion保持为空
            </summary>
        </member>
        <member name="M:PENet.PESocket`2.StartAsClient(System.String,System.Int32)">
            <summary>
            以客户端身份启动套接字：
            1.发送一个异步的远程终端连接请求；
            2.如果1成功，则将实例化Sesion对象，并开始异步的接收数据；如果连接失败，例如远程主机未开启，则Settion值会保持为null
            </summary>
        </member>
        <member name="M:PENet.PESocket`2.SetLog(System.Boolean,System.Action{System.String,System.Int32})">
            <summary>
            自定义控制台日志逻辑，目的是适配不同的运行环境；
            这段逻辑会保存到PETool当中，通过PETool.LogMsg()调用
            </summary>
            <param name="log">log switch</param>
            <param name="logCB">log function</param>
        </member>
        <member name="M:PENet.PETool.PackLenInfo(System.Byte[])">
            <summary>
            将一个字节数组转换为带有自身长度的信息的字节数组并返回
            </summary>
        </member>
        <member name="M:PENet.PETool.Serialize``1(``0)">
            <summary>
            将一个PEMsg实例转换成一个字节数组
            </summary>
            <typeparam name="T">类型参数，PEMsg的子类型</typeparam>
            <param name="pkg">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:PENet.PETool.DeSerialize``1(System.Byte[])">
            <summary>
            将字节数组转换为消息的实例
            </summary>
            <typeparam name="T">消息的类型,它是PEMsg的子类</typeparam>
            <param name="bs">消息的序列化字节流</param>
            <returns></returns>
        </member>
        <member name="M:PENet.PETool.LogMsg(System.String,PENet.LogLevel)">
            <summary>
            打印日志；它会先给消息加一个时间前缀
            如果委托成员logCB为空，调用控制台打印，否则调用logCB的逻辑；
            logCB由聚合它的PESocket()的SetLog方法设置
            </summary>
            <param name="msg">日志信息的内容</param>
            <param name="lv">日志信息的级别</param>
        </member>
        <member name="T:PENet.LogLevel">
            <summary>
            Log Level
            </summary>
        </member>
    </members>
</doc>
